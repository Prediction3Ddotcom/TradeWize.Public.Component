import { type ViewStyle, type TextStyle, type ImageStyle } from 'react-native';
import type { ReactNode } from 'react';
export interface SelectOption {
    label: string;
    value: string | number;
    disabled?: boolean;
    icon?: ReactNode;
    description?: string;
}
export interface SelectBoxProps {
    label?: string;
    placeholder?: string;
    helperText?: string;
    errorText?: string;
    options: SelectOption[];
    value?: string | number | Array<string | number>;
    onChange?: (value: string | number | Array<string | number>) => void;
    multiple?: boolean;
    searchable?: boolean;
    leftIcon?: ReactNode;
    rightIcon?: ReactNode;
    variant?: 'outline' | 'filled' | 'underline';
    size?: 'small' | 'medium' | 'large';
    isDisabled?: boolean;
    isError?: boolean;
    isRequired?: boolean;
    fullWidth?: boolean;
    shadowColor?: string;
    containerStyle?: ViewStyle;
    inputStyle?: TextStyle;
    labelStyle?: TextStyle;
    inputContainerStyle?: ViewStyle;
    helperTextStyle?: TextStyle;
    errorTextStyle?: TextStyle;
    modalStyle?: ViewStyle;
    modalOverlayStyle?: ViewStyle;
    modalContentStyle?: ViewStyle;
    modalHeaderStyle?: ViewStyle;
    modalFooterStyle?: ViewStyle;
    modalTitleStyle?: TextStyle;
    shadowContentStyle?: ViewStyle;
    searchContainerStyle?: ViewStyle;
    searchInputStyle?: TextStyle;
    optionStyle?: ViewStyle;
    optionLabelStyle?: TextStyle;
    optionDescriptionStyle?: TextStyle;
    selectedOptionStyle?: ViewStyle;
    disabledOptionStyle?: ViewStyle;
    checkboxStyle?: ViewStyle;
    checkmarkStyle?: TextStyle;
    leftIconContainerStyle?: ViewStyle;
    rightIconContainerStyle?: ViewStyle;
    chevronIconStyle?: ImageStyle;
    clearButtonStyle?: ViewStyle;
    clearButtonTextStyle?: TextStyle;
    closeButtonStyle?: ViewStyle;
    closeButtonTextStyle?: TextStyle;
    borderColorActive?: string;
    borderColorError?: string;
    borderColor?: string;
    backgroundColor?: string;
    textColor?: string;
    placeholderColor?: string;
    modalBackgroundColor?: string;
    selectedBackgroundColor?: string;
    checkboxSelectedColor?: string;
    checkboxUnselectedColor?: string;
    maxHeight?: number;
    emptyMessage?: string;
    searchPlaceholder?: string;
    closeOnSelect?: boolean;
    modalPosition?: 'center' | 'bottom';
    animationInTiming?: number;
    animationOutTiming?: number;
    backdropOpacity?: number;
    showClearButton?: boolean;
    showCheckmark?: boolean;
    onModalShow?: () => void;
    onModalHide?: () => void;
    onModalWillShow?: () => void;
    onModalWillHide?: () => void;
    swipeDirection?: 'up' | 'down' | 'left' | 'right' | Array<'up' | 'down' | 'left' | 'right'>;
    onSwipeComplete?: () => void;
    swipeThreshold?: number;
    backdropColor?: string;
    backdropTransitionInTiming?: number;
    backdropTransitionOutTiming?: number;
    hideModalContentWhileAnimating?: boolean;
    avoidKeyboard?: boolean;
    coverScreen?: boolean;
    hasBackdrop?: boolean;
    customBackdrop?: ReactNode;
    modalTitle?: string;
    confirmButtonText?: string;
    cancelButtonText?: string;
    confirmButtonStyle?: ViewStyle;
    confirmButtonTextStyle?: TextStyle;
    cancelButtonStyle?: ViewStyle;
    cancelButtonTextStyle?: TextStyle;
    renderOption?: (option: SelectOption, isSelected: boolean) => ReactNode;
    renderLabel?: (label: string, isRequired: boolean) => ReactNode;
    renderDisplayText?: (displayText: string, selectedOptions: SelectOption[]) => ReactNode;
    renderModalHeader?: (title: string, onClose: () => void) => ReactNode;
    renderModalFooter?: (onConfirm: () => void, onClear: () => void, selectedCount: number) => ReactNode;
    renderEmptyState?: (emptyMessage: string) => ReactNode;
    renderSearchInput?: (searchQuery: string, onChangeText: (text: string) => void) => ReactNode;
    renderLeftIcon?: (size: number, color: string) => ReactNode;
    renderRightIcon?: (size: number, color: string) => ReactNode;
    renderChevron?: (isOpen: boolean) => ReactNode;
    renderClearButton?: (onClear: () => void) => ReactNode;
    onOpen?: () => void;
    onClose?: () => void;
    onSearch?: (query: string) => void;
    onClear?: () => void;
    onSelectOption?: (option: SelectOption) => void;
    onDeselectOption?: (option: SelectOption) => void;
    onFocus?: () => void;
    onBlur?: () => void;
    filterOptions?: (options: SelectOption[], searchQuery: string) => SelectOption[];
    sortOptions?: (options: SelectOption[]) => SelectOption[];
    getOptionLabel?: (option: SelectOption) => string;
    getOptionValue?: (option: SelectOption) => string | number;
    isOptionDisabled?: (option: SelectOption) => boolean;
    isOptionSelected?: (option: SelectOption, value?: string | number | Array<string | number>) => boolean;
    accessibilityLabel?: string;
    accessibilityHint?: string;
    testID?: string;
    modalTestID?: string;
    optionTestID?: string;
}
export declare function SelectBox({ label, placeholder, helperText, errorText, options, value, onChange, multiple, searchable, leftIcon, rightIcon, variant, size, isDisabled, isError, isRequired, fullWidth, shadowColor, containerStyle, inputStyle, labelStyle, inputContainerStyle, helperTextStyle, errorTextStyle, shadowContentStyle, modalStyle, modalOverlayStyle, modalContentStyle, modalHeaderStyle, modalFooterStyle, modalTitleStyle, searchContainerStyle, searchInputStyle, optionStyle, optionLabelStyle, optionDescriptionStyle, selectedOptionStyle, disabledOptionStyle, checkboxStyle: customCheckboxStyle, checkmarkStyle: customCheckmarkStyle, leftIconContainerStyle, rightIconContainerStyle, chevronIconStyle: customChevronIconStyle, clearButtonStyle, clearButtonTextStyle: customClearButtonTextStyle, closeButtonStyle, closeButtonTextStyle, borderColorActive, borderColorError, borderColor, backgroundColor, textColor, placeholderColor, modalBackgroundColor, selectedBackgroundColor, checkboxSelectedColor, checkboxUnselectedColor, maxHeight, emptyMessage, searchPlaceholder, closeOnSelect, modalPosition, animationInTiming, animationOutTiming, backdropOpacity, showClearButton, showCheckmark, onModalShow, onModalHide, onModalWillShow, onModalWillHide, swipeDirection, onSwipeComplete, swipeThreshold, backdropColor, backdropTransitionInTiming, backdropTransitionOutTiming, hideModalContentWhileAnimating, avoidKeyboard, coverScreen, hasBackdrop, customBackdrop, modalTitle, confirmButtonText, cancelButtonText, confirmButtonStyle, confirmButtonTextStyle, cancelButtonStyle, cancelButtonTextStyle, renderOption, renderLabel, renderDisplayText, renderModalHeader, renderModalFooter, renderEmptyState, renderSearchInput, renderLeftIcon, renderRightIcon, renderChevron, renderClearButton, onOpen, onClose, onSearch, onClear, onSelectOption, onDeselectOption, onFocus, onBlur, filterOptions, sortOptions, getOptionLabel, getOptionValue, isOptionDisabled: customIsOptionDisabled, isOptionSelected: customIsOptionSelected, accessibilityLabel, accessibilityHint, testID, modalTestID, optionTestID, }: SelectBoxProps): import("react/jsx-runtime").JSX.Element;
//# sourceMappingURL=SelectBox.d.ts.map