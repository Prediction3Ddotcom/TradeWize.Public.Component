import { type ViewStyle, type TextStyle, type ImageStyle } from 'react-native';
import type { ReactNode } from 'react';
import type { MarkingTypes } from 'react-native-calendars/src/types';
export interface DatePickerProps {
    label?: string;
    placeholder?: string;
    helperText?: string;
    errorText?: string;
    value?: string;
    onChange?: (date: string) => void;
    minDate?: string;
    maxDate?: string;
    leftIcon?: ReactNode;
    rightIcon?: ReactNode;
    variant?: 'outline' | 'filled' | 'underline';
    size?: 'small' | 'medium' | 'large';
    isDisabled?: boolean;
    isError?: boolean;
    isRequired?: boolean;
    fullWidth?: boolean;
    shadowColor?: string;
    noteDescription?: string;
    containerStyle?: ViewStyle;
    inputStyle?: TextStyle;
    labelStyle?: TextStyle;
    inputContainerStyle?: ViewStyle;
    helperTextStyle?: TextStyle;
    errorTextStyle?: TextStyle;
    noteDescriptionStyle?: TextStyle;
    modalStyle?: ViewStyle;
    modalOverlayStyle?: ViewStyle;
    modalContentStyle?: ViewStyle;
    modalHeaderStyle?: ViewStyle;
    modalFooterStyle?: ViewStyle;
    modalTitleStyle?: TextStyle;
    shadowContentStyle?: ViewStyle;
    leftIconContainerStyle?: ViewStyle;
    rightIconContainerStyle?: ViewStyle;
    chevronIconStyle?: ImageStyle;
    borderColorActive?: string;
    borderColorError?: string;
    borderColor?: string;
    backgroundColor?: string;
    textColor?: string;
    placeholderColor?: string;
    modalBackgroundColor?: string;
    selectedDayBackgroundColor?: string;
    selectedDayTextColor?: string;
    todayTextColor?: string;
    maxHeight?: number;
    modalPosition?: 'center' | 'bottom';
    animationInTiming?: number;
    animationOutTiming?: number;
    backdropOpacity?: number;
    onModalShow?: () => void;
    onModalHide?: () => void;
    onModalWillShow?: () => void;
    onModalWillHide?: () => void;
    swipeDirection?: 'up' | 'down' | 'left' | 'right' | Array<'up' | 'down' | 'left' | 'right'>;
    onSwipeComplete?: () => void;
    swipeThreshold?: number;
    backdropColor?: string;
    backdropTransitionInTiming?: number;
    backdropTransitionOutTiming?: number;
    hideModalContentWhileAnimating?: boolean;
    avoidKeyboard?: boolean;
    coverScreen?: boolean;
    hasBackdrop?: boolean;
    customBackdrop?: ReactNode;
    modalTitle?: string;
    confirmButtonText?: string;
    cancelButtonText?: string;
    confirmButtonStyle?: ViewStyle;
    confirmButtonTextStyle?: TextStyle;
    cancelButtonStyle?: ViewStyle;
    cancelButtonTextStyle?: TextStyle;
    renderLabel?: (label: string, isRequired: boolean) => ReactNode;
    renderDisplayText?: (displayText: string, selectedDate?: string) => ReactNode;
    renderModalHeader?: (title: string, onClose: () => void) => ReactNode;
    renderModalFooter?: (onConfirm: () => void, onCancel: () => void, selectedDate?: string) => ReactNode;
    renderLeftIcon?: (size: number, color: string) => ReactNode;
    renderRightIcon?: (size: number, color: string) => ReactNode;
    renderChevron?: (isOpen: boolean) => ReactNode;
    onOpen?: () => void;
    onClose?: () => void;
    onFocus?: () => void;
    onBlur?: () => void;
    onClear?: () => void;
    calendarTheme?: any;
    markedDates?: {
        [key: string]: any;
    };
    markingType?: MarkingTypes;
    firstDayOfWeek?: number;
    showWeekNumbers?: boolean;
    disableAllTouchEventsForDisabledDays?: boolean;
    enableSwipeMonths?: boolean;
    hideExtraDays?: boolean;
    hideDayNames?: boolean;
    hideArrows?: boolean;
    monthFormat?: string;
    dateFormat?: string;
    formatDate?: (date: string) => string;
    accessibilityLabel?: string;
    accessibilityHint?: string;
    testID?: string;
    modalTestID?: string;
}
export declare function DatePicker({ label, placeholder, helperText, errorText, value, onChange, minDate, maxDate, leftIcon, rightIcon, variant, size, isDisabled, isError, isRequired, fullWidth, shadowColor, noteDescription, containerStyle, inputStyle, labelStyle, inputContainerStyle, helperTextStyle, errorTextStyle, shadowContentStyle, noteDescriptionStyle, modalStyle, modalOverlayStyle, modalContentStyle, modalHeaderStyle, modalFooterStyle, modalTitleStyle, leftIconContainerStyle, rightIconContainerStyle, chevronIconStyle: customChevronIconStyle, borderColorActive, borderColorError, borderColor, backgroundColor, textColor, placeholderColor, modalBackgroundColor, selectedDayBackgroundColor, selectedDayTextColor, todayTextColor, maxHeight, modalPosition, animationInTiming, animationOutTiming, backdropOpacity, onModalShow, onModalHide, onModalWillShow, onModalWillHide, swipeDirection, onSwipeComplete, swipeThreshold, backdropColor, backdropTransitionInTiming, backdropTransitionOutTiming, hideModalContentWhileAnimating, avoidKeyboard, coverScreen, hasBackdrop, customBackdrop, modalTitle, confirmButtonText, cancelButtonText, confirmButtonStyle, confirmButtonTextStyle, cancelButtonStyle, cancelButtonTextStyle, renderLabel, renderDisplayText, renderModalHeader, renderModalFooter, renderLeftIcon, renderRightIcon, renderChevron, onOpen, onClose, onFocus, onBlur, onClear, calendarTheme, markedDates: customMarkedDates, markingType, firstDayOfWeek, showWeekNumbers, disableAllTouchEventsForDisabledDays, enableSwipeMonths, hideExtraDays, hideDayNames, hideArrows, monthFormat, dateFormat, formatDate, accessibilityLabel, accessibilityHint, testID, modalTestID, }: DatePickerProps): import("react/jsx-runtime").JSX.Element;
//# sourceMappingURL=DatePicker.d.ts.map